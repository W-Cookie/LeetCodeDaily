# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def balanceBST(self, root: TreeNode) -> TreeNode:
        #Two optimization ideas as mentioned by others too:
        # Put TreeNode into list not their values
        # Use start and end pointers to avoid recreating new array - saves both time and space complexity
        if not root:
            return None
        nodes = []
        def dfs(node):
            if not node:
                return
            dfs(node.left)
            nodes.append(node)
            dfs(node.right)
        dfs(root)   
        
        def constructBST(start, end):
            if start > end:
                return None
            mid = (start+end)//2
            root = nodes[mid]
            root.left = constructBST(start, mid-1)
            root.right = constructBST(mid+1, end)
            return root
        return constructBST(0, len(nodes)-1)
#         if not root:
#             return None
#         val = []
#         def dfs(node):
#             if not node:
#                 return
#             dfs(node.left)
#             val.append(node.val)
#             dfs(node.right)
            
#         def constructBST(val):
#             if not val:
#                 return None
#             mid = (len(val)-1)//2
#             root = TreeNode(val = val[mid])
#             root.left = constructBST(val[0:mid])
#             root.right = constructBST(val[mid+1:])
#             return root
#         dfs(root)
#         return constructBST(val)
                            
                            
                    
            
        
        
