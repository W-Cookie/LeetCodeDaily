class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        start = set()
        def dfs(i, j):
            if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]):
                return
            if grid[i][j] == 0:
                start.add((1, i, j))
            if grid[i][j] != 1:
                return 
            grid[i][j] = 2
            dfs(i+1, j)
            dfs(i-1, j)
            dfs(i, j+1)
            dfs(i, j-1)
        
        found = False
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i, j)
                    found = True
                    break
            if found:
                break
        queue = list(start)
        for step, i, j in queue:
            for x, y in (i - 1, j), (i, j - 1), (i, j + 1), (i + 1, j):
                if 0 <= x < m and 0 <= y < n:
                    if grid[x][y] == 1:
                        return step
                    elif grid[x][y] == 0:
                        grid[x][y] = -1  # important step to reduce the search space
                        queue.append((step + 1, x, y))
        
                
                    
