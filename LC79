class Solution:      
    def exist(self, board: List[List[str]], word: str) -> bool:
        def connected(r,c, index):
            if index == len(word) -1:
                return True           
            row = r
            col = c
            for s in range(4):
                if row + off_r[s] < 0 or col + off_c[s] < 0 or row + off_r[s] > m-1 or col + off_c[s] > n-1:
                    continue
                elif board[row + off_r[s]][col + off_c[s]] == word[index+1] and board_visited[row + off_r[s]][col + off_c[s]] == 0:
                    board_visited[row + off_r[s]][col + off_c[s]] = 1
                    if connected(row + off_r[s], col + off_c[s], index + 1):
                        return True
                    board_visited[row + off_r[s]][col + off_c[s]] = 0
            return False

            
        m = len(board)
        n = len(board[0])
        res = False
        board_visited = [[0]*n for _ in range(m)]
        
        # offsets for four directions
        off_r = [-1, 0, 1, 0]
        off_c = [0, 1, 0, -1]
            
        # determine the start location
        for row in range(m):
            for col in range(n):
                if board[row][col] == word[0]:                  
                    board_visited[row][col] = 1
                    if connected(row, col, 0):
                        return True
                    board_visited[row][col] = 0
        return False
