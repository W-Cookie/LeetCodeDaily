class Solution:
    # def lengthOfLongestSubstring(self, s: str) -> int:
    #     l = 0
    #     r = 0
    #     submax  = 0
    #     dict = {}
    #     while r < len(s):
    #         if s[r] not in dict:
    #             dict[s[r]] = r
    #         else:
    #             l = max(l, dict[s[r]]+1)
    #         dict[s[r]] = r
    #         submax = max(submax, r-l+1)
    #         r += 1
    #     return submax
    
    # sliding window solution
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) <= 1:
            return len(s)
        sublen = 0
        l = 0
        r = 0
        ch = set()
        while r < len(s):
            if s[r] not in ch:
                ch.add(s[r])
                r += 1
            else:
                ch.remove(s[l])
                l += 1
            sublen = max(sublen, r-l)
        return sublen
        
