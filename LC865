# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
        # dfs
        # Tag each node with it's depth.
        depth = {None: -1}
        def dfs(node, parent = None):
            if node:
                depth[node] = depth[parent] + 1
                dfs(node.left, node)
                dfs(node.right, node)
        dfs(root)

        max_depth = max(depth.values())

        def answer(node):
            # Return the answer for the subtree at node.
            if not node or depth.get(node, None) == max_depth:
                return node
            L, R = answer(node.left), answer(node.right)
            return node if L and R else L or R

        return answer(root)
        
#         # 2 phase dfs
#         # o(n) / o(n)
#         if not root:
#             return None
#         parent = {}
#         queue = [root]
#         while queue:
#             deeps = queue[:]
#             for i in range(len(queue)):
#                 cur = queue.pop(0)
#                 if cur.left:
#                     queue.append(cur.left)
#                     parent[cur.left] = cur
#                 if cur.right:
#                     queue.append(cur.right)
#                     parent[cur.right] = cur
        
#         visited = set()
#         while deeps:
#             if len(deeps) == 1:
#                 return deeps[0]
#             for i in range(len(deeps)):
#                 deep = deeps.pop(0)
#                 if deep not in parent:
#                     return deep
#                 elif parent[deep] not in visited:
#                     deeps.append(parent[deep])
#                     visited.add(parent[deep])
                
