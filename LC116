"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        # space o(1) solution
        if not root:
            return None
        leftmost = root
        while leftmost.left:
            head = leftmost
            while head:
                head.left.next = head.right
                if head.next:
                    head.right.next = head.next.left
                head = head.next
            leftmost = leftmost.left
        return root
        

#         #space o(n) solution
#         if not root:
#             return None
#         queue = [root]
#         while queue:
#             size = len(queue)
#             for i in range(size):
#                 node = queue.pop(0)
#                 #pop node at each level
#                 if i < size - 1:
#                     node.next = queue[0]
#                 if node.left:
#                     queue.append(node.left)
#                 if node.right:
#                     queue.append(node.right)
#         return root
                
#         last = root
#         if not root:
#             return None
#         current_level = 0
#         queue = [(root,1)]
#         last = root
#         while queue:
#             current, level = queue.pop(0)           
#             if current_level == level:
#                 last.next = current
                
#             if current.left:
#                 queue.append((current.left, level + 1))
#             if current.right:
#                 queue.append((current.right, level + 1))
            
#             if not queue:
#                 current.next = None
            
#             last = current
#             current_level = level
        
#         return root
        
