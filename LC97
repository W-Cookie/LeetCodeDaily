class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        r, c, l= len(s1), len(s2), len(s3)
        if r+c != l:
            return False
        dp = [True for _ in range(c+1)] 
        # use only 1D dp array to store the results of the prefixes of the strings processed so farã€‚ dp[0] = True
        # if not start from s1, for s2, j from 1 to c+1, we check if the j th element of s3 is equal to the jth element of s2 
        for j in range(1, c+1):
            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]
            
        for i in range(1, r+1):
            #check the first element of s2, 
            dp[0] = (dp[0] and s1[i-1] == s3[i-1])
            for j in range(1, c+1):
                dp[j] = (dp[j] and s1[i-1] == s3[i-1+j]) or (dp[j-1] and s2[j-1] == s3[i-1+j])
        return dp[-1]
        
