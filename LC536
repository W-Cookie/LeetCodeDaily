# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    #one pass O(N) solution
    def str2tree(self, s: str) -> Optional[TreeNode]:
        if not s or len(s) == 0:
            return None
        
        def helper(s, i):
            start = i
            while i < len(s) and (s[i] == '-' or s[i].isdigit()):
                i += 1
            if start == i:
                return None, i
            #construct root node
            node = TreeNode(int(s[start:i]))
            if i < len(s) and s[i] == "(": # left subtree
                i += 1 # skip (
                node.left, i = helper(s, i)
                i += 1 # skip )
            if i < len(s) and s[i] == "(": # right subtree
                i += 1 # skip (
                node.right, i = helper(s, i)
                i += 1 # skip )
            return node, i
        
        root, x = helper(s,0)
        return root
    
    
#     # optimized version of my solution
#     def str2tree(self, S):
#         ix = S.find('(')
#         if ix < 0:
#             return TreeNode(int(S)) if S else None
        
#         bal = 0
#         for jx, u in enumerate(S):
#             if u == '(': bal += 1
#             if u == ')': bal -= 1
#             if jx > ix and bal == 0:
#                 break

#         root = TreeNode(int(S[:ix]))
#         root.left = self.str2tree(S[ix+1:jx])
#         root.right = self.str2tree(S[jx+2:-1])
#         return root
    
#     # my stupid slow solution
#     def str2tree(self, s: str) -> Optional[TreeNode]:
#         def helper(s):
            
#             if not s:
#                 return None
            
#             first = ""
#             i = 0
#             while i<len(s) and s[i]!="(":
#                 first += s[i]
#                 i += 1
                
#             node = TreeNode(val = int(first)) 
            
#             lefts, rights = "",""
#             stack = []
 
#             while i<len(s) and (not lefts or stack):
#                 lefts += s[i]
#                 if s[i].isalpha():
#                     continue
#                 elif s[i] == "(":
#                     stack.append(s[i])
#                 elif s[i] == ")":
#                     stack.pop() 
#                 i+=1
                    
#             if i<len(s):
#                 rights = s[i:]
 
#             if lefts:
#                 node.left = helper(lefts[1:-1])
#             if rights:
#                 node.right = helper(rights[1:-1])
#             return node 
#         return helper(s)
