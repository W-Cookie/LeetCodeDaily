"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []
"""

class Solution:
    def diameter(self, root: 'Node') -> int:
        """
        :type root: 'Node'
        :rtype: int
        """
        # time o(n), space o(n)
#         diameter = 0
#         def maxDepth(node):
#             nonlocal diameter
#             if not node.children:
#                 return 0
#             # select the top 2 depths from its children
#             max_depth_1, max_depth_2 = -1, -1
#             for child in node.children:
#                 depth = maxDepth(child)
#                 if depth > max_depth_1:
#                     max_depth_1, max_depth_2 = depth, max_depth_1
#                 elif depth > max_depth_2:
#                     max_depth_2 = depth
#             # calculate the distance between the two farthest leaves nodes
#             if max_depth_2 == -1:
#                 distance = max_depth_1 + 1
#             else:
#                 distance = max_depth_1 + max_depth_2 + 2
#             diameter = max(diameter, distance)
            
#             return max_depth_1 + 1
#         maxDepth(root)
#         return diameter


        def maxDepth(node, curr_depth):
            nonlocal diameter
            if not node.children:
                return curr_depth
            # select the top 2 depths from its children
            max_depth_1, max_depth_2 = curr_depth, 0
            for child in node.children:
                depth = maxDepth(child, curr_depth + 1)
                if depth > max_depth_1:
                    max_depth_1, max_depth_2 = depth, max_depth_1
                elif depth > max_depth_2:
                    max_depth_2 = depth
            # calculate the distance between the two farthest leaves nodes
            distance = max_depth_1 + max_depth_2 - 2 * curr_depth
            diameter = max(diameter, distance)
            
            return max_depth_1
        maxDepth(root, 0)
        return diameter

                    
