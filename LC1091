class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        
        # simple BFS with visited set
        m = len(grid)
        n = len(grid[0])
        if grid[0][0] != 0 or grid[m-1][n-1] != 0:
            return -1
        
        dir = [[-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1],[-1, -1]]
        visited = set()
        queue = [(0, 0)]
        visited.add((0, 0))
        distance = 0
        while queue:
            distance += 1
            for i in range(len(queue)):
                row, col = queue.pop(0)
                if row == m-1 and col == n-1:
                    return distance
                for [x,y] in dir:
                    if row+x < 0 or row+x >= m or col+y < 0 or col+y >= n or grid[row+x][col+y] != 0 or (row+x, col+y) in visited:
                        continue
                    else:
                        visited.add((row+x, col+y))
                        queue.append((row+x, col+y))
        return -1
        
        
        
