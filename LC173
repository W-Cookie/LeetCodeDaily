# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:
    # O(h) space complexity solution
    def __init__(self, root: Optional[TreeNode]):
        self.stack = []
        self.leftmost_inorder(root)
        
    def leftmost_inorder(self, root):

        # For a given node, add all the elements in the leftmost branch of the tree
        # under it to the stack.
        while root:
            self.stack.append(root)
            root = root.left   
        
    def next(self) -> int:
        current = self.stack.pop()
        if current.right:
            self.leftmost_inorder(current.right)
        return current.val
        
        
    def hasNext(self) -> bool:
        return len(self.stack) > 0
        
        
        
#     # O(N) space complexity solution
#     def __init__(self, root: Optional[TreeNode]):
#         self.stack = []
#         self.pointer = -1
#         def dfs(node):
#             if not node:
#                 return
#             dfs(node.left)
#             self.stack.append(node.val)
#             dfs(node.right)
#         dfs(root)
    
#     def next(self) -> int:
#         self.pointer += 1
#         return self.stack[self.pointer]
        

#     def hasNext(self) -> bool:
#         return self.pointer + 1 < len(self.stack)
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
