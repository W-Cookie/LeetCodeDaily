"""
# Definition for a Node.
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
        self.parent = None
"""

class Solution:
    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        pvals = set()
        def traverseup(node):
            if not node or node in pvals:
                return node
            pvals.add(node)
            return traverseup(node.parent)
        
        return traverseup(p) or traverseup(q)

    # None in python evaluates to False, so doing None or Node will return Node
